#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('media-recode:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var mongoose = require('mongoose');
mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost/mediarecode');


var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  debug('connected to db');
});

var Video = require('../models/Video');

var Glob = require("glob").Glob;

var crypto = require('crypto')
var fs = require('fs');

var initialScan = new Glob('~/Downloads/**/*.avi');

initialScan.on('match', function(path){
  var hash = crypto.createHash('md5');
  var stream = fs.createReadStream(path);
  debug('match '+ path);
  stream.on('data', function (data) {
      hash.update(data, 'utf8');
  })

  stream.on('end', function () {
      var finalMd5 = hash.digest('hex');
      debug(finalMd5);
      Video.find({identifier:finalMd5, path:path}).then(function (videos) {
        if(videos.length === 0){
          var newVideo = new Video({identifier:finalMd5, path:path});
              newVideo.save().then(function (video) {
                debug(video);
              });
        }
      });
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
